<?php
$post['id']='16';
$post['title']='Парсер математичних виразів на C#';
$post['text']='Колись в універі треба було написати парсер математичних виразів. Писати його мені сподобалось, було цікаво, тепер хочу викласти його для загального користування.<br><br>Що це таке взагалі. Такий парсер це незамінна штука, якщо ваша програма має рахувати значення якихось виразів, і ці вирази треба задавати <i>не </i>в коді. А десь в інтерфейсі. Парсер приймає рядок символів типу <b>sin(pi/3.8)*ln(100500)+arctg(2)</b>, парсить його і видає вам значення цього виразу. Тобто <b>9.58115271771543</b> :)<br><br>Тепер, що вміє конкретно цей парсер:<br><ol><li>Рахувати значення числового виразу;<br></li><li>Рахувати значення виразу з довільною кількістю заданих змінних;<br></li><li>Рахувати першу похідну виразу в точці;</li><li>Рахувати другу похідну виразу в точці.</li></ol><p>Поки що це все :). Завантажити парсер можна в кінці запису. Я час-від-часу шось доробляю, фікшу, тому цей запис постійно оновлюється, там в кінці ше є посилання на репозиторій, де можна завантажити вихідний код останньої версії.&nbsp;<cut> <span id="cut"><img id="scissors" src="templates/cut.png" border="0"></span></cut></p><p>Що ше планую доробити:<br></p><ol><li><strike>Унарний мінус. Зараз не можна написати щось типу <b>-5*x+3</b>. Унарний мінус не передбачений, тому таке не розпарситься. Доведеться викручуватись і самому робити його бінарним: <b>0-5*x+3</b>. Колись виправлю;</strike><b> UPD 29.09.2015</b> — унарний мінус доробив Юра Прийма (2 курс, 2015 рік, інформатика). Правда не так, як мені хотілось, Юра просто заміняє «–» на «0–», що по-суті є костилем, але краще так, ніж ніяк :). Хотілось окремо описати унарний оператор «–» і те, як він має парситись.<b><br></b></li><li><strike>Задання функцій від багатьох аргументів</strike> зробив;<strike><br></strike></li><li>Логарифм за будь-якою основою;<br></li><li>Малювання графіків (це вже майже є);</li><li>…</li></ol><h3><br></h3><h3>Інтерфейс парсера<br></h3><p>Є клас <b>MathExpression</b>, створюєте об’єкт цього класу, його конструктор приймає рядок, який треба розпарсити:<br></p><div class="pastebin">Код з <a href="http://pastebin.com/sqemwFxV">http://pastebin.com/sqemwFxV</a></div><script src="https://pastebin.com/embed_js.php?i=sqemwFxV"></script><p>Список операторів, функцій і тд., які сприймає парсер:</p><ol><li>Додавання «<b>+</b>»;<br></li><li>Віднімання «<b>-</b>»;</li><li>Множення «<b>*</b>»</li><li>Ділення «<b>/</b>»</li><li>Піднесення до степеня «<b>^</b>»</li><li>Корінь квадратний (<b>sqrt</b>);<br></li><li>Дужки для надання пріоритету «<b>(</b>» і «<b>)</b>»</li><li>Синус «<b>sin</b>»;</li><li>Косинус «<b>cos</b>»;</li><li>Тангенс «<b>tg</b>»;</li><li>Котангенс «<b>ctg</b>»;</li><li>Арксинус «<b>arcsin</b>»;</li><li>Арккосинус «<b>arccos</b>»;</li><li>Арктангенс «<b>arctg</b>»;</li><li>Арккотангенс «<b>arcctg</b>»;</li><li>Синус гіперболічний «<b>sinh</b>»;</li><li>Косинус гіперболічний «<b>cosh</b>»;</li><li>Тангенс гіперболічний «<b>tgh</b>»;</li><li>Котангенс гіперболічний «<b>ctgh</b>»;</li><li>Логарифм натуральний «<b>ln</b>»;</li><li>Логарифм десятковий «<b>lg</b>»;</li><li>Модуль «<b>abs</b>»;</li><li>Функція знаку «<b>sign</b>»;</li><li>Число пі «<b>pi</b>»</li><li>Число е «<b>e</b>»</li><li>В якості змінних можна використовувати майже всі букви лат. алфавіту. Не можна використовувати «<b>е</b>» (бо це константа), і ще декілька. Список букв для змінних: <b>a</b>, <b>b</b>, <b>c</b>, <b>d</b>, <b>i</b>, <b>j</b>, <b>k</b>, <b>l</b>, <b>m</b>, <b>n</b>, <b>p</b>, <b>q</b>, <b>r</b>, <b>s</b>, <b>t</b>, <b>u</b>, <b>v</b>, <b>x</b>, <b>y</b>, <b>z</b>.</li></ol><p>В парсері є такі методи:</p><ol><li><b>double Calculate();</b> //рахує і повертає значення простого числового виразу (без змінних)</li><li><b>double Calculate(double);</b> //рахує значення виразу в точці</li><li><b>double Calculate(params double[])</b>; //рахує значення виразу від кількох змінних, значення змінних задаються через кому. Якщо першою у виразі зустрінеться змінна <b>x</b>, то парсер замінить всі ікси у виразі на те значення, яке ви передали першим, якщо другою буде змінна <b>y</b>, то всі ігрики заміняться на друге передане вами значення, і так далі. Якщо не ясно, нижче є приклади;</li><li><b>double Calculate(params Var[]);</b> //рахує значення виразу від кількох змінних, аргументами є об’єкти типу <b>Var</b>. Тип <b>Var </b>складається з двох проперть, <b>name</b> (string)<b> </b>і <b>value</b> (double), відповідно назва і значення змінної. У цьому методі можна явно задати, яка змінна чому має бути рівна. Приклади теж нижче;<br></li><li><b>double Derivative(double);</b> //рахує значення похідної виразу в точці</li><li><b>double SecondDerivative(double);</b> //рахує значення другої похідної виразу в точці<br></li></ol><h3><br></h3><h3>Приклади використання<br></h3><p>Обчислення значення простого числового виразу:</p><div class="pastebin">Код з <a href="http://pastebin.com/3qvcDeEA">http://pastebin.com/3qvcDeEA</a></div><script src="https://pastebin.com/embed_js.php?i=3qvcDeEA"></script><p>Обчислення значення виразу із однією змінною, значення якої 2:</p><div class="pastebin">Код з <a href="http://pastebin.com/eu1Vm4A6">http://pastebin.com/eu1Vm4A6</a></div><script src="https://pastebin.com/embed_js.php?i=eu1Vm4A6"></script><p>Обчислення значення виразу від двох змінних, одна = 2, інша 5.<br></p><div class="pastebin">Код з <a href="http://pastebin.com/T3HNRvB9">http://pastebin.com/T3HNRvB9</a></div><script src="https://pastebin.com/embed_js.php?i=T3HNRvB9"></script><p>Обчислення значення виразу від двох змінних, із явним заданням, що y=10, x=4.<br></p><div class="pastebin">Код з <a href="http://pastebin.com/vy8Ag6ry">http://pastebin.com/vy8Ag6ry</a></div><script src="https://pastebin.com/embed_js.php?i=vy8Ag6ry"></script><p>Обчислення похідної виразу в точці x=0. Похідну рахує наближено, наприклад тут точне значення похідної має вийти <b>2</b>, а обчислене виходить <b><span class="co1">2.0000001654807</span><span class="co1">.</span></b><span class="co1"> Так, точність туфтова. Щось з цим зроблю.</span><b><span class="co1"><br></span></b></p><div class="pastebin">Код з <a href="http://pastebin.com/aDXnjVBe">http://pastebin.com/aDXnjVBe</a></div><script src="https://pastebin.com/embed_js.php?i=aDXnjVBe"></script><p>Обчислення другої похідної при x=0:<br></p><div class="pastebin">Код з <a href="http://pastebin.com/Z13yRQdH">http://pastebin.com/Z13yRQdH</a></div><script src="https://pastebin.com/embed_js.php?i=Z13yRQdH"></script><h3><br></h3><h3><br></h3><h3>Файли для завантаження</h3><p>Поки що парсер досить сирий, і там ше є що доробляти, але я вирішив, що він вже достатньо непоганий, щоб показувати його на публіку :). Назвемо це версією 0.1.<br></p><ol><li><a target="" title="" href="https://poohitan.com/files/PoohMathParser.dll">dll-бібліотека</a>, готова для використання. Щоб підключити її, додайте у проект reference на цей dll-файл, і потім зробіть <b>using PoohMathParser</b>. Ну ви ж вмієте підключати бібліотеки?)<br></li><li><a href="https://github.com/poohitan/pooh-math-parser" title="" target="">репозиторій з вихідними файлами</a> (обережно, бидлокод!)</li></ol>';
$post['hidden']='';
$post['subs']='';
$post['holdtime']='';
$post['dietime']='';
$post['close']='';
$post['nocomm']='';
$post['commhide']='';
$post['attach']='';
$post['commpriv']='';
$post['nobr']='';
?>
